[{"filePath":"C:\\Users\\smgal\\OneDrive\\Documents\\GitHub\\lapidoty-sqe-workshop-2018-exercise-2\\src\\js\\app.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\smgal\\OneDrive\\Documents\\GitHub\\lapidoty-sqe-workshop-2018-exercise-2\\src\\js\\code-analyzer.js","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":47,"column":1,"nodeType":"Keyword","endLine":47,"endColumn":9,"fix":{"range":[1243,1251],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":48,"column":1,"nodeType":"Keyword","endLine":48,"endColumn":9,"fix":{"range":[1303,1311],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":49,"column":1,"nodeType":"Keyword","endLine":49,"endColumn":9,"fix":{"range":[1369,1377],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":50,"column":1,"nodeType":"Keyword","endLine":50,"endColumn":9,"fix":{"range":[1431,1439],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":56,"column":1,"nodeType":"Keyword","endLine":56,"endColumn":9,"fix":{"range":[1576,1584],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":57,"column":1,"nodeType":"Keyword","endLine":57,"endColumn":9,"fix":{"range":[1652,1660],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":58,"column":1,"nodeType":"Keyword","endLine":58,"endColumn":9,"fix":{"range":[1729,1737],"text":"    "}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":80,"column":6,"nodeType":"VariableDeclaration","fix":{"range":[2413,2413],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":100,"column":10,"nodeType":"ReturnStatement","fix":{"range":[2982,2982],"text":";"}},{"ruleId":"max-lines-per-function","severity":2,"message":"function 'AssignmentExpression' has too many lines (22). Maximum allowed is 20.","line":105,"column":1,"nodeType":"FunctionDeclaration","endLine":126,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"function 'IfStatement' has too many lines (26). Maximum allowed is 20.","line":128,"column":1,"nodeType":"FunctionDeclaration","endLine":153,"endColumn":2},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":132,"column":40,"nodeType":"Literal","endLine":132,"endColumn":47,"fix":{"range":[3660,3667],"text":"'green'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":132,"column":50,"nodeType":"Literal","endLine":132,"endColumn":55,"fix":{"range":[3670,3675],"text":"'red'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":132,"column":55,"nodeType":"VariableDeclaration","fix":{"range":[3675,3675],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":138,"column":51,"nodeType":"VariableDeclaration","fix":{"range":[3903,3903],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":149,"column":6,"nodeType":"VariableDeclaration","fix":{"range":[4112,4112],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":159,"column":6,"nodeType":"ReturnStatement","fix":{"range":[4297,4297],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":172,"column":6,"nodeType":"ReturnStatement","fix":{"range":[4583,4583],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":182,"column":6,"nodeType":"ReturnStatement","fix":{"range":[4835,4835],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":192,"column":6,"nodeType":"VariableDeclaration","fix":{"range":[5040,5040],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":203,"column":6,"nodeType":"ReturnStatement","fix":{"range":[5265,5265],"text":";"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":211,"column":1,"nodeType":"Keyword","endLine":211,"endColumn":9,"fix":{"range":[5382,5390],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":212,"column":1,"nodeType":"Keyword","endLine":212,"endColumn":9,"fix":{"range":[5441,5449],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":213,"column":1,"nodeType":"Keyword","endLine":213,"endColumn":9,"fix":{"range":[5494,5502],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":214,"column":1,"nodeType":"Keyword","endLine":214,"endColumn":9,"fix":{"range":[5573,5581],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":220,"column":1,"nodeType":"Keyword","endLine":220,"endColumn":9,"fix":{"range":[5721,5729],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":221,"column":1,"nodeType":"Keyword","endLine":221,"endColumn":9,"fix":{"range":[5792,5800],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":222,"column":1,"nodeType":"Keyword","endLine":222,"endColumn":9,"fix":{"range":[5863,5871],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":223,"column":1,"nodeType":"Keyword","endLine":223,"endColumn":9,"fix":{"range":[5932,5940],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":224,"column":1,"nodeType":"Keyword","endLine":224,"endColumn":9,"fix":{"range":[6003,6011],"text":"    "}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":267,"column":6,"nodeType":"ReturnStatement","fix":{"range":[7100,7100],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":276,"column":6,"nodeType":"ReturnStatement","fix":{"range":[7328,7328],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":285,"column":6,"nodeType":"ReturnStatement","fix":{"range":[7558,7558],"text":";"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":303,"column":1,"nodeType":"Keyword","endLine":303,"endColumn":9,"fix":{"range":[7847,7855],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":304,"column":1,"nodeType":"Keyword","endLine":304,"endColumn":9,"fix":{"range":[7900,7908],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":305,"column":1,"nodeType":"Keyword","endLine":305,"endColumn":9,"fix":{"range":[7971,7979],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":312,"column":1,"nodeType":"Keyword","endLine":312,"endColumn":9,"fix":{"range":[8061,8069],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":313,"column":1,"nodeType":"Keyword","endLine":313,"endColumn":9,"fix":{"range":[8115,8123],"text":"    "}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":342,"column":18,"nodeType":"Literal","endLine":342,"endColumn":20,"fix":{"range":[8764,8766],"text":"''"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":342,"column":31,"nodeType":"Literal","endLine":342,"endColumn":33,"fix":{"range":[8777,8779],"text":"''"}}],"errorCount":40,"warningCount":0,"fixableErrorCount":38,"fixableWarningCount":0,"source":"import * as esprima from 'esprima';\r\nimport * as escodegen from 'escodegen';\r\nconst cloneDeep = require('clone-deep');\r\nvar astEval = require('static-eval');\r\n\r\nlet old_locals = new Map();\r\nlet new_locals = new Map();\r\nlet input_vector = new Map();\r\nlet current_locals = new_locals;\r\nlet isAssignment = false;\r\nlet true_path = true;\r\nlet subMode = false;\r\n\r\nconst parseCode = (codeToParse) => {\r\n    return esprima.parseScript(codeToParse);\r\n};\r\n\r\n\r\nexport function traverse(jsonObj) {\r\n    //console.log(jsonObj);\r\n    let program = Program(jsonObj);\r\n    //console.log(program);\r\n    return escodegen.generate(program).fontsize(4);\r\n}\r\n\r\nfunction Program(program) {\r\n    return {\r\n        type: 'Program',\r\n        body: FunctionDeclarations(program.body),\r\n        sourceType: 'script',\r\n    };\r\n}\r\n\r\n/*********** Statements ***********/\r\n\r\nfunction Statement(statement) {\r\n    switch (statement.type) {\r\n    case 'ExpressionStatement': return ExpressionStatement(statement);\r\n    case 'ReturnStatement': return ReturnStatement(statement);\r\n    case 'BlockStatement': return BlockStatement(statement);\r\n    default: return ConditionStatement(statement);\r\n    }\r\n}\r\n\r\nfunction ConditionStatement(statement) {\r\n    switch (statement.type) {\r\n        case 'IfStatement': return IfStatement(statement);\r\n        case 'WhileStatement': return WhileStatement(statement);\r\n        case 'ForStatement': return ForStatement(statement);\r\n        default: return DeclarationStatement(statement);\r\n    }\r\n}\r\n\r\nfunction DeclarationStatement(statement) {\r\n    switch (statement.type) {\r\n        case 'VariableDeclaration': return VariableDeclaration(statement);\r\n        case 'FunctionDeclaration ': return FunctionDeclaration(statement);\r\n        default: null;\r\n    }\r\n}\r\n\r\nfunction FunctionDeclaration(functionDeclaration) {\r\n    return {\r\n        type: 'FunctionDeclaration',\r\n        id: Identifier(functionDeclaration.id),\r\n        params: FunctionParameter(functionDeclaration.params),\r\n        body: Statement(functionDeclaration.body),\r\n        generator: functionDeclaration.generator,\r\n        expression: functionDeclaration.expression,\r\n        async: functionDeclaration.async,\r\n    };\r\n}\r\n\r\nfunction VariableDeclaration(declaration) {\r\n\r\n    let declarations = {\r\n        type: 'VariableDeclaration',\r\n        declarations: VariableDeclarator(declaration.declarations),\r\n        kind: declaration.kind,\r\n    }\r\n    handleDeclarations(declarations);\r\n}\r\n\r\nfunction handleDeclarations(declarations) {\r\n    declarations.declarations.map((declaration) => handleOneDeclartion(declaration));\r\n\r\n}\r\n\r\nfunction handleOneDeclartion(declaration) {\r\n    new_locals.set(declaration.id.name, declaration.init);\r\n    old_locals = cloneDeep(new_locals);\r\n}\r\n\r\nfunction VariableDeclarator(declaration) {\r\n    return declaration.map(function make(d) {\r\n        return {\r\n            type: 'VariableDeclarator',\r\n            id: Identifier(d.id),\r\n            init: Expression(d.init),\r\n        }\r\n    });\r\n\r\n}\r\n\r\nfunction AssignmentExpression(expression) {\r\n    isAssignment = true;\r\n    let ass = {\r\n        type: 'AssignmentExpression',\r\n        operator: expression.operator,\r\n        left: Expression(expression.left),\r\n        right: Expression(expression.right),\r\n    };\r\n\r\n    if (isLocal(ass.left.name)) {\r\n        if (true_path) {\r\n            new_locals.set(ass.left.name, ass.right);\r\n        }\r\n\r\n        current_locals.set(ass.left.name, ass.right);\r\n\r\n    }\r\n    else {\r\n        return ass;\r\n    }\r\n\r\n}\r\n\r\nfunction IfStatement(statement) {\r\n\r\n    let test = Expression(statement.test);\r\n    true_path = evaluate(test);\r\n    let color = (true_path === true) ? \"green\" : \"red\"\r\n    current_locals = cloneDeep(old_locals);\r\n    let consequent = Statement(statement.consequent);\r\n\r\n    true_path = !true_path;\r\n    current_locals = cloneDeep(old_locals);\r\n    let alternate = Statement(statement.alternate)\r\n\r\n    old_locals = cloneDeep(new_locals);\r\n\r\n\r\n    let node = {\r\n        type: 'IfStatement',\r\n        test: test,\r\n        consequent: consequent,\r\n        alternate: alternate,\r\n        color: color\r\n    }\r\n\r\n    return node;\r\n\r\n}\r\n\r\nfunction BlockStatement(statement) {\r\n    return {\r\n        type: 'BlockStatement',\r\n        body: filtered(statement.body.map((s) => Statement(s))),\r\n    }\r\n}\r\n\r\nfunction WhileStatement(statement) {\r\n    let test = Expression(statement.test);\r\n\r\n    true_path = evaluate(test);\r\n    current_locals = cloneDeep(old_locals);\r\n\r\n    return {\r\n        type: 'WhileStatement',\r\n        test: test,\r\n        body: Statement(statement.body),\r\n    }\r\n}\r\n\r\nfunction ForStatement(statement) {\r\n    return {\r\n        type: 'ForStatement',\r\n        init: init(init),\r\n        test: Expression(statement.test),\r\n        update: Expression(statement.update),\r\n        body: Statement(statement.body),\r\n    }\r\n}\r\n\r\n\r\nfunction ExpressionStatement(statement) {\r\n\r\n    let s = {\r\n        type: 'ExpressionStatement',\r\n        expression: Expression(statement.expression),\r\n        directive: statement.string,\r\n    }\r\n    if (s.expression != null)\r\n        return s;\r\n    else return null;\r\n}\r\n\r\n\r\nfunction ReturnStatement(statement) {\r\n    return {\r\n        type: 'ReturnStatement',\r\n        argument: Expression(statement.argument),\r\n    }\r\n}\r\n\r\n\r\n/*********** Expressions ***********/\r\n\r\nfunction Expression(expression) {\r\n    switch (expression.type) {\r\n        case 'Identifier': return Identifier(expression);\r\n        case 'Literal': return Literal(expression);\r\n        case 'AssignmentExpression': return AssignmentExpression(expression);\r\n        default: return RecurseiveExpression(expression);\r\n    }\r\n}\r\n\r\nfunction RecurseiveExpression(expression) {\r\n    switch (expression.type) {\r\n        case 'BinaryExpression': return BinaryExpression(expression);\r\n        case 'MemberExpression': return MemberExpression(expression);\r\n        case 'UnaryExpression': return UnaryExpression(expression);\r\n        case 'UpdateExpression': return UpdateExpression(expression);\r\n        default: null;\r\n    }\r\n}\r\n\r\nfunction Identifier(expression) {\r\n    if (subMode) return vector_substition(expression);\r\n    else {\r\n        let value = current_locals.get(expression.name);\r\n        if (value === undefined || isAssignment) {\r\n            if (isAssignment) isAssignment = false;\r\n            return {\r\n                type: 'Identifier',\r\n                name: expression.name,\r\n            };\r\n        }\r\n        else\r\n            return value;\r\n    }\r\n}\r\n\r\nfunction Literal(expression) {\r\n    return {\r\n        type: 'Literal',\r\n        value: expression.value,\r\n        raw: expression.raw,\r\n    };\r\n}\r\n\r\nfunction BinaryExpression(expression) {\r\n    return {\r\n        type: 'BinaryExpression',\r\n        operator: expression.operator,\r\n        left: Expression(expression.left),\r\n        right: Expression(expression.right),\r\n    };\r\n}\r\n\r\nfunction MemberExpression(expression) {\r\n    return {\r\n        type: 'MemberExpression',\r\n        computed: expression.boolean,\r\n        object: Expression(expression.object),\r\n        property: Expression(expression.property),\r\n    }\r\n}\r\n\r\nfunction UnaryExpression(expression) {\r\n    return {\r\n        type: 'UnaryExpression',\r\n        operator: expression.operator,\r\n        argument: Expression(expression.argument),\r\n        prefix: expression.prefix,\r\n    }\r\n}\r\n\r\nfunction UpdateExpression(expression) {\r\n    return {\r\n        type: 'UpdateExpression',\r\n        operator: expression.operator,\r\n        argument: Expression(expression.argument),\r\n        prefix: expression.boolean\r\n    }\r\n}\r\n\r\n\r\n\r\n//*********** Utils ***********/\r\n\r\nfunction FunctionDeclarations(functions) {\r\n    return functions.map((p) => FunctionDeclaration(p));\r\n\r\n}\r\nfunction FunctionParameter(params) {\r\n\r\n    return params.map((p) => Param(p));\r\n}\r\n\r\nfunction init(init) {\r\n    switch (init.type) {\r\n        case 'Expression': return Expression(init);\r\n        case 'VariableDeclaration': return VariableDeclaration(init);\r\n        default: null;\r\n    }\r\n}\r\n\r\nfunction Param(param) {\r\n\r\n    switch (param.type) {\r\n        case 'Identifier': return Identifier(param);\r\n        default: null;\r\n    }\r\n}\r\n\r\nfunction filtered(array) {\r\n    return array.filter(function (el) {\r\n        return el != null;\r\n    });\r\n}\r\n\r\nfunction isLocal(name) {\r\n    return new_locals.get(name) !== undefined;\r\n}\r\n\r\n\r\n//*********** Eval and Substition /***********/\r\nfunction evaluate(exp) {\r\n    subMode = true;\r\n    let to_return = astEval(Expression(exp));\r\n    subMode = false;\r\n    return to_return;\r\n}\r\n\r\nfunction vector_substition(expression) {\r\n    if (!isLocal(expression.name)) {\r\n        let value = input_vector.get(expression.name);\r\n        return {\r\n            type: 'Literal',\r\n            value: value,\r\n            raw: \"\" + value + \"\",\r\n        };\r\n    }\r\n}\r\n\r\n/*\r\n function try_to_eval(exp){\r\n    console.log(exp)\r\n    let to_ret;\r\n    let value;\r\n    try {\r\n         value = astEval(exp);\r\n    }\r\n    catch {\r\n        to_ret = exp\r\n    }\r\n    finally{\r\n    if(typeof(value) === \"number\" || typeof(value) === \"boolean\" || typeof(value) === \"string\" ){\r\n        to_ret = {\r\n            type: 'Literal',\r\n            value: value,\r\n            raw: \"\" + value + \"\",\r\n        };\r\n    }\r\n    else{\r\n        to_ret = exp\r\n    }\r\n        return to_ret;\r\n    \r\n    }\r\n}\r\n*/\r\n\r\nexport { parseCode };\r\nexport { input_vector };\r\n"}]